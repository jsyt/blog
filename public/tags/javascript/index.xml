<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Luke&#39;s blog</title>
    <link>https://www.goyth.cn/tags/javascript/</link>
    <description>Recent content in JavaScript on Luke&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2019, Luke and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 25 May 2019 21:53:54 +0800</lastBuildDate>
    
	<atom:link href="https://www.goyth.cn/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单页面（SPA）路由实现原理</title>
      <link>https://www.goyth.cn/post/sparouter/</link>
      <pubDate>Sat, 25 May 2019 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/sparouter/</guid>
      <description>什么是单页面应用 ? 单页面应用（SPA）即single page application，目前在前后端分离的项目中，一般都是采用 SPA 的模式，整个应用只有一个 html 页面。后端接口只负责提供数据，而页面路由则需要前端自己完成。单页面应用的优势：1. 减少 http 请求数，降低服务器压力；2. 有利于前后端分离；3. 页面流畅度更高，用户体验更加友好。</description>
    </item>
    
    <item>
      <title>编写一个 Babel 插件</title>
      <link>https://www.goyth.cn/post/babelplugin/</link>
      <pubDate>Sun, 06 Jan 2019 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/babelplugin/</guid>
      <description>Babel转译流程 Babel 对源码进行转译时，主要有三个步骤  首先通过Babylon 将源码转化成 AST 然后再通过babel-traverse遍历 AST，找到需要更改的 AST 节点，对其进行修改 根据修改后的 AST，通过babel-generator将修改后的 AST重新生成源码 Babel插件主要是处理第二步。  Babylon Babylon 是 Babel 的解析器，主要负责将源码转化成 AST。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import * as babylon from &amp;#34;babylon&amp;#34;; const code = `function square(n) { return n * n; }`; babylon.parse(code); // Node { // type: &amp;#34;File&amp;#34;, // start: 0, // end: 38, // loc: SourceLocation {.</description>
    </item>
    
    <item>
      <title>Babel 核心模块介绍</title>
      <link>https://www.goyth.cn/post/babel/</link>
      <pubDate>Sat, 05 Jan 2019 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/babel/</guid>
      <description>Babel 介绍 Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。 Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译（transpiling，是一个自造合成词，即转换＋编译。以下也简称为转译）。
例如，Babel 能够将新的 ES2015 箭头函数语法：
1  const square = n =&amp;gt; n * n;   转译为：
1 2 3  const square = function square(n) { return n * n; };   Babel核心模块介绍 Babel-core 可以看做 babel 的编译器。babel 的核心 api 都在这里面。它可以把 js 代码，抽象成 AST，然后修改 AST ，再根据AST生成新的js代码，这就是Babel 转译的过程。但是如何转译、转译哪些内容，着需要我们事先设置好的 plugin，plugin 就是如何转译的规则。
babel-register 它在底层改写了node的require方法，引入babel-register之后所有require并以.es6, .es, .</description>
    </item>
    
    <item>
      <title>抽象语法树AST介绍</title>
      <link>https://www.goyth.cn/post/ast/</link>
      <pubDate>Sun, 23 Dec 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/ast/</guid>
      <description>js编译执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成token，之后再通过语法分析生成 AST（Abstract Syntax Tree），最后生成机器码执行。词法分析，也称之为扫描（scanner），简单来说就是调用 next() 方法，一个一个字母的来读取字符，然后与定义好的 JavaScript 关键字符做比较，生成对应的Token。Token 是一个不可分割的最小单元，例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。</description>
    </item>
    
    <item>
      <title>JavaScript垃圾回收机制与内存泄漏</title>
      <link>https://www.goyth.cn/post/v8gc/</link>
      <pubDate>Sun, 02 Dec 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/v8gc/</guid>
      <description>程序的运行需要分配内存，内存资源是有限的，当程序运行结束后，就应该回收其内存资源。JavaScript使用自动内存管理，也称为垃圾回收机制（garbage collector）。自动垃圾回收的优点是可以简化开发，不用时刻惦记着回收不再使用的变量，降低内存泄漏的可能性；缺点是无法完全的掌握内存的分配以及回收的具体过程。</description>
    </item>
    
    <item>
      <title>Promise实现原理</title>
      <link>https://www.goyth.cn/post/promise/</link>
      <pubDate>Fri, 03 Aug 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/promise/</guid>
      <description>1.&lt;code&gt;promise&lt;/code&gt; 函数的参数（executor）是一个函数，这个函数有两个参数&lt;code&gt;resolve&lt;/code&gt;和&lt;code&gt;reject&lt;/code&gt;，这两个参数也都是函数，分别在&lt;code&gt;promise&lt;/code&gt;成功和失败时调用。 2. 当构建一个&lt;code&gt;promise&lt;/code&gt;实例时，会自动调用这个函数（executor） 3. 每个&lt;code&gt;promise&lt;/code&gt;对象都有一个&lt;code&gt;onFulfilledCallback&lt;/code&gt;队列和一个&lt;code&gt;onRejectedCallback&lt;/code&gt;队列，用来分别存储成功和失败时调用的回调函数</description>
    </item>
    
    <item>
      <title>浏览器的缓存机制梳理</title>
      <link>https://www.goyth.cn/post/browsecache/</link>
      <pubDate>Sun, 01 Jul 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/browsecache/</guid>
      <description>概述 浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，HTTP报文分为两种：
HTTP请求(Request)报文，报文格式为：请求行 – HTTP头(通用信息头，请求头，实体头) – 请求报文主体(只有POST才有报文主体)，如下图
HTTP响应(Response)报文，报文格式为：状态行 – HTTP头(通用信息头，响应头，实体头) – 响应报文主体，如下图
注：通用信息头指的是请求和响应报文都支持的头域，分别为Cache-Control、Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via；实体头则是实体信息的实体头域，分别为Allow、Content-Base、Content-Encoding、Content-Language、Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、Etag、Expires、Last-Modified、extension-header。这里只是为了方便理解，将通用信息头，响应头/请求头，实体头都归为了HTTP头。
以上的概念在这里我们不做多讲解，只简单介绍，有兴趣的童鞋可以自行研究。
缓存过程分析 浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：
由上图我们可以知道：
  浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识
  浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中
  以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了，本文也将围绕着这点进行详细分析。为了方便大家理解，这里我们根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是强制缓存和协商缓存。
强制缓存 强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：
 不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致），如下图：   存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存(暂不分析)，如下图   存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果，如下图  那么强制缓存的缓存规则是什么？
当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是Expires和Cache-Control，其中Cache-Control优先级比Expires高。
Expires Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。
Expires是HTTP/1.0的字段，但是现在浏览器默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？
到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？
Cache-Control 在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：
  public：所有内容都将被缓存（客户端和代理服务器都可缓存）
  private：所有内容只有客户端可以缓存，Cache-Control的默认取值
  no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定
  no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存
  max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效
  接下来，我们直接看一个例子，如下：
由上面的例子我们可以知道：
  HTTP响应报文中expires的时间值，是一个绝对值</description>
    </item>
    
    <item>
      <title>浏览器常见跨域方式梳理</title>
      <link>https://www.goyth.cn/post/crossdomain/</link>
      <pubDate>Fri, 29 Jun 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/crossdomain/</guid>
      <description>跨域是由于浏览器同源策略导致的，所以跨域只存在于浏览器端，非浏览器端不存在跨域问题，浏览器对跨域的请求、应答都能正常发送接收，只是浏览器在接收跨域应答时，将应答拦截了，所以我们需要一些额外的处理或设置让浏览器将跨域的应答返回给我们。
常见的跨域处理方式有：  jsonp CORS iframe + postMessage iframe + window.name iframe + location.hash iframe + domain nginx代理 Nodejs中间件 WebSocket  jsonp 跨域 jsonp 跨域是利用script标签天生具备跨域的特性，script的src属性发起的请求不受浏览器同源策略的限制，所以我们可以动态生成一个script标签对象，将要请求数据的url赋值给script标签的src属性，然后将此script标签append到body中。但是服务端怎么返回数据呢，返回的数据又如何处理呢？此时我们还需要预先写好一个解析数据的函数analyzeData，并将这个函数名通过请求的url一并传给后端，后端收到后，直接请求的数据放在解析函数analyzeData的参数中analyzeData({a:1,b:2,c:3})并返回，当次script标签加载完毕后就会直接执行analyzeData({a:1,b:2,c:3})方法。
1 2 3 4 5 6 7 8  // 预先写好一个解析数据的函数 function analyzeData(data) { console.log(data) } var sct = document.createElement(&amp;#39;script&amp;#39;) sct.src = &amp;#39;http://goyth.com/json?callback=analyzeData&amp;#39; document.body.appendChild(sct)   jsop 的优点是兼容性好，能兼容低版本的浏览器，缺点是只支持get请求，不支持其他方式的请求，并且对回调函数的错误处理不太友好。
CORS(跨域资源共享) CORS 全称为跨域资源共享（Cross-origin resource sharing），它是 W3C 用来允许XMLHttpRequest请求跨域的一个标准，也是现在主流的跨域方案。 CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。IE8+：IE8/9需要使用XDomainRequest对象来支持CORS。
整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。
因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。
跨域请求只需要在服务端应答报文头增加一个Access-Control-Allow-Origin字段，该字段是的值要么是请求时Origin字段的值，要么是一个 * ，Access-Control-Allow-Origin=Origin字段的值 表示只接受该域的请求，Access-Control-Allow-Origin=* 表示接受任意域名的请求。此时的请求是不带Cookie的，如果需要带上Cookie，则需要在发起请求时将 XMLHttpRequest 实例的 withCredentials 属性设置为 true，在服务端将Access-Control-Allow-Credentials字段设置为true。</description>
    </item>
    
    <item>
      <title>JavaScript之apply、call和bind的模拟实现</title>
      <link>https://www.goyth.cn/post/applyandcall/</link>
      <pubDate>Sun, 27 May 2018 22:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/applyandcall/</guid>
      <description>apply() apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。当第一个参数为 null 时，函数上下文为 window。
1 2 3 4 5 6 7 8 9  var obj = { name : &amp;#39;luke&amp;#39; } function func(age, gender){ console.log(this.name + &amp;#39; &amp;#39; + age + &amp;#39; &amp;#39; + gender); } func.apply(obj, [18, &amp;#39;male&amp;#39;]); // luke 18 male   apply模拟实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  Function.</description>
    </item>
    
    <item>
      <title>浏览器渲染之回流（Reflow）与重绘（Repaint）</title>
      <link>https://www.goyth.cn/post/reflowandrepaint/</link>
      <pubDate>Fri, 25 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/reflowandrepaint/</guid>
      <description>回流（Reflow）和重绘（Repaint）的定义 回流（Reflow） 对于DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式（浏览器的、开发人员定义的等）来计算，并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow。 重绘（Repaint） 当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为 repaint。</description>
    </item>
    
    <item>
      <title>浏览器页面渲染流程梳理</title>
      <link>https://www.goyth.cn/post/browserrendering/</link>
      <pubDate>Wed, 23 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/browserrendering/</guid>
      <description>浏览器渲染基本流程 浏览器渲染流程如下图所示：
大概可以划分成以下几个步骤：
 通过HTML解析器解析HTML文本并构建DOM tree 通过CSS解析器解析CSS样式表并构建CSSOM tree 根据DOM tree 和 CSSOM tree 构建 Render tree Render tree 刚构建完后是没有元素节点坐标、尺寸大小等信息的，此时需要通过Layout(Reflow)进行布局处理，计算出元素在屏幕上显示的位置，尺寸大小等信息。 遍历渲染树，对每一个元素节点进行绘制（Painting）  解析（Parsing） 解析的过程分为两个步骤：词法分析和语法分析。 词法分析负责将输入内容分解成一个个有效标记；而语法分析负责根据语言的语法规则分析文档的结构，从而构建解析树。通过词法分析可以将无关的字符（比如空格和换行符）分离出来。
解析是一个迭代的过程。通常，解析器会向词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树中，然后继续请求下一个标记。
如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到可与所有内部存储的标记匹配的规则。如果找不到任何匹配规则，解析器就会引发一个异常。这意味着文档无效，包含语法错误。
转译(Translation) 很多时候，解析树还不是最终产品。解析通常是在转译过程中使用的，而转译是指将输入文档转换成另一种格式。编译就是这样一个例子。编译器可将源代码编译成机器代码，具体过程是首先将源代码解析成解析树，然后将解析树翻译成机器代码文档。
HTML解析 解析器的输出“解析树”是由 DOM 元素和属性节点构成的树结构。DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 解析树的根节点是“Document”对象。
DOM 与标记之间几乎是一一对应的关系。比如下面这段标记：
1 2 3 4 5 6 7 8  &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; Hello World &amp;lt;/p&amp;gt; &amp;lt;div&amp;gt; &amp;lt;img src=&amp;#34;example.png&amp;#34;/&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   可翻译成如下的 DOM 树：</description>
    </item>
    
    <item>
      <title>JavaScript 之函数防抖与节流</title>
      <link>https://www.goyth.cn/post/debounceandthrottle/</link>
      <pubDate>Thu, 10 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/debounceandthrottle/</guid>
      <description>函数防抖（debounce) 函数防抖是指在函数调用动作触发n秒后才开始执行，n秒内若再次触发，则重新开始计时，再次等待n秒后才开始执行。如果n秒内不断触发，那就不断重新开始计时，一直等到有一个n秒内没有触发，才开始执行此函数。
根据描述，我们可以用setTimeout来实现一个简单版的防抖函数
第一版 1 2 3 4 5 6 7 8 9 10 11 12  ／** * @ fn 回调函数 * @ delay 延迟时间 *／ function debounce(fn, delay){ let timer = null; return function(){ clearTimeout(timer); timer = setTimeout(fn, delay); } }   由于setTimeout的回调函数内的this是指向window，如果不传参数则argument对象为空，所以我们得修复this的指向，并将argument对象也传给回调函数
第二版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ／** * @ fn 回调函数 * @ delay 延迟时间 *／ function debounce(fn, delay){ let timer = null; return function(){ let context = this, arg = arguments; clearTimeout(timer); timer = setTimeout(function(){ fn.</description>
    </item>
    
    <item>
      <title>JavaScript 原型链与继承</title>
      <link>https://www.goyth.cn/post/prototypeandextend/</link>
      <pubDate>Mon, 23 Apr 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/prototypeandextend/</guid>
      <description>原型对象 无论什么时候，只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性指向 prototype 属性所在的函数。
1 2  function Person(){ }   当我们用构造函数创建一个实例时，也会为这个实例创建一个 __proto__ 属性，这个__proto__ 属性是一个指针指向构造函数的原型对象
1 2 3 4  let person = new Person(); person.__proto__ === Person.prototype // true let person1 = new Person(); person1.__proto__ === Person.prototype // true   由于同一个构造函数创建的所有实例对象的__proto__ 属性都指向这个构造函数的原型对象，因此所有的实例对象都会共享构造函数的原型对象上所有的属性和方法，一旦原型对象上的属性或方法发生改变，所有的实例对象都会受到影响。
1 2 3 4 5 6 7 8 9 10 11  function Person(){ } Person.prototype.name = &amp;#34;Luke&amp;#34;; Person.prototype.age = 18; let person1 = new Person(); let person2 = new Person(); alert(person1.</description>
    </item>
    
    <item>
      <title>JavaScript 正则表达式</title>
      <link>https://www.goyth.cn/post/jsregexp/</link>
      <pubDate>Sun, 01 Apr 2018 21:53:54 +0800</pubDate>
      
      <guid>https://www.goyth.cn/post/jsregexp/</guid>
      <description>正则表达式 一种几乎可以在所有的程序设计语言里和所有的计算机平台上使用的文字处理工具。它可以用来查找特定的信息（搜索），也可以用来查找并编辑特定的信息（替换）。 核心是 匹配，匹配位置或者匹配字符
先简单的介绍一下语法 基本元字符   .： 匹配除了换行符之外的任何单个字符
  \ ： 在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。例如，没有前\的&#39;b&#39;通常匹配小写&#39;b&#39;，无论它们出现在哪里。如果加了&#39;\&#39;,这个字符变成了一个特殊意义的字符，反斜杠也可以将其后的特殊字符，转义为字面量。例如，模式 /a*/ 代表会匹配 0 a。相反，模式 /a\*/ 将 &#39; * &#39; 的特殊性移除，从而可以匹配像 &amp;quot;a*&amp;quot; 这样的字符串。
  | ： 逻辑或操作符
  [ ] ：定义一个字符集合，匹配字符集合中的一个字符，在字符集合里面像 . ，\这些字符都表示其本身
  [^ ] ：对上面一个集合取非
  - ：定义一个区间，例如[A-Z]，其首尾字符在 ASCII 字符集里面
  数量元字符  {m,n} ：匹配前面一个字符至少 m 次至多 n 次重复，还有{m}表示匹配 m 次，{m,}表示至少 m 次 + ： 匹配前面一个表达式一次或者多次，相当于 {1,}，记忆方式追加(+)，起码得有一次 * ： 匹配前面一个表达式零次或者多次，相当于 {0,}，记忆方式乘法(*)，可以一次都没有 ?</description>
    </item>
    
  </channel>
</rss>