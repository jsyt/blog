<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GOYTH: a Hugo Theme on GOYTH</title>
    <link>https://goyth.cn/</link>
    <description>Recent content in GOYTH: a Hugo Theme on GOYTH</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2020 21:53:54 +0800</lastBuildDate>
    
	<atom:link href="https://goyth.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 30. 串联所有单词的子串</title>
      <link>https://goyth.cn/2020/02/26/leetcode30/</link>
      <pubDate>Wed, 26 Feb 2020 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2020/02/26/leetcode30/</guid>
      <description>给定一个字符串 &lt;strong&gt;s&lt;/strong&gt; 和一些长度相同的单词 &lt;strong&gt;words&lt;/strong&gt;找出 &lt;strong&gt;s&lt;/strong&gt; 中恰好可以由 &lt;strong&gt;words&lt;/strong&gt; 中所有单词串联形成的子串的起始位置。
注意子串要与 &lt;strong&gt;words&lt;/strong&gt; 中的单词完全匹配，中间不能有其他字符，但不需要考虑 &lt;strong&gt;words&lt;/strong&gt;中单词串联的顺序。</description>
    </item>
    
    <item>
      <title>Express路由与中间件原理（中间件篇）</title>
      <link>https://goyth.cn/2019/07/20/expressmiddleware/</link>
      <pubDate>Sat, 20 Jul 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/07/20/expressmiddleware/</guid>
      <description>&lt;code&gt;Express&lt;/code&gt; 路由原理见 &lt;a href=&#34;http://www.goyth.com/2019/07/20/expressRouter/&#34;&gt;Express路由与中间件原理（路由篇）&lt;/a&gt; &lt;code&gt;Express&lt;/code&gt; 中间件通常用来一些公用的逻辑，并可以将处理的结果挂载在 &lt;code&gt;req&lt;/code&gt;、&lt;code&gt;res&lt;/code&gt; 上，以供后面的中间件函数，或路由函数使用。因此通常情况下中间件函数会放在路由的前面。在 &lt;code&gt;Express&lt;/code&gt; 中，注册一个中间件与注册一个路由一样，也是放在 &lt;code&gt;app.routes&lt;/code&gt; 中，只是中间件的 &lt;code&gt;method&lt;/code&gt; 为 middle。</description>
    </item>
    
    <item>
      <title>Express路由与中间件原理（路由篇）</title>
      <link>https://goyth.cn/2019/07/20/expressrouter/</link>
      <pubDate>Sat, 20 Jul 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/07/20/expressrouter/</guid>
      <description>导入 &lt;code&gt;express&lt;/code&gt; 后会得到一个 &lt;code&gt;express&lt;/code&gt; 函数，执行这个函数后返回一个 &lt;code&gt;app&lt;/code&gt; &lt;code&gt;函数，app&lt;/code&gt; 上有一个 &lt;code&gt;listen&lt;/code&gt; 函数，执行这个 &lt;code&gt;listen&lt;/code&gt; 函数就会启一个 &lt;code&gt;http&lt;/code&gt; 服务，通过 &lt;code&gt;app.get&lt;/code&gt;、&lt;code&gt;app.post&lt;/code&gt;、&lt;code&gt;app.all&lt;/code&gt;等函数来注册监听函数，如果 &lt;code&gt;http server&lt;/code&gt; 监听到有请求到来，就会调用在 &lt;code&gt;app&lt;/code&gt; 上注册的相应的回调函数。</description>
    </item>
    
    <item>
      <title>golang 学习笔记（一）——语法篇</title>
      <link>https://goyth.cn/2019/06/08/golanglearning01/</link>
      <pubDate>Sat, 08 Jun 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/06/08/golanglearning01/</guid>
      <description>golang 应⽤程序⼊⼝  必须是 main 包：package main 必须是 main ⽅法：func main() ⽂件名不⼀定是 main.go  退出返回值 与其他主要编程语⾔的差异
 Go 中 main 函数不⽀持任何返回值 通过 os.Exit 来返回状态  获取命令⾏参数 与其他主要编程语⾔的差异
 main 函数不⽀持传⼊参数 func main(arg []string) 在程序中直接通过 os.</description>
    </item>
    
    <item>
      <title>单页面（SPA）路由实现原理</title>
      <link>https://goyth.cn/2019/05/25/sparouter/</link>
      <pubDate>Sat, 25 May 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/05/25/sparouter/</guid>
      <description>什么是单页面应用 ? 单页面应用（SPA）即single page application，目前在前后端分离的项目中，一般都是采用 SPA 的模式，整个应用只有一个 html 页面。后端接口只负责提供数据，而页面路由则需要前端自己完成。单页面应用的优势：1. 减少 http 请求数，降低服务器压力；2. 有利于前后端分离；3. 页面流畅度更高，用户体验更加友好。</description>
    </item>
    
    <item>
      <title>Webpack 工作原理（三）</title>
      <link>https://goyth.cn/2019/01/12/webpackloader/</link>
      <pubDate>Sat, 12 Jan 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/01/12/webpackloader/</guid>
      <description>webpack Loader 是一个符合 &lt;code&gt;commonjs&lt;/code&gt; 规范的模块，这个模块导出一个函数，它的主要作用是对源码进行转换，webpack 在调用 Loader时，会将源代码作为参数传递给这个Loader，然后该loader会对源码进行转换，并且返回转换后的内容。</description>
    </item>
    
    <item>
      <title>编写一个 Babel 插件</title>
      <link>https://goyth.cn/2019/01/06/babelplugin/</link>
      <pubDate>Sun, 06 Jan 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/01/06/babelplugin/</guid>
      <description>Babel转译流程 Babel 对源码进行转译时，主要有三个步骤  首先通过Babylon 将源码转化成 AST 然后再通过babel-traverse遍历 AST，找到需要更改的 AST 节点，对其进行修改 根据修改后的 AST，通过babel-generator将修改后的 AST重新生成源码 Babel插件主要是处理第二步。  Babylon Babylon 是 Babel 的解析器，主要负责将源码转化成 AST。
import * as babylon from &amp;#34;babylon&amp;#34;; const code = `function square(n) { return n * n; }`; babylon.</description>
    </item>
    
    <item>
      <title>Babel 核心模块介绍</title>
      <link>https://goyth.cn/2019/01/05/babel/</link>
      <pubDate>Sat, 05 Jan 2019 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2019/01/05/babel/</guid>
      <description>Babel 介绍 Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。 Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译（transpiling，是一个自造合成词，即转换＋编译。以下也简称为转译）。
例如，Babel 能够将新的 ES2015 箭头函数语法：
const square = n =&amp;gt; n * n; 转译为：</description>
    </item>
    
    <item>
      <title>抽象语法树AST介绍</title>
      <link>https://goyth.cn/2018/12/23/ast/</link>
      <pubDate>Sun, 23 Dec 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/12/23/ast/</guid>
      <description>js编译执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成token，之后再通过语法分析生成 AST（Abstract Syntax Tree），最后生成机器码执行。词法分析，也称之为扫描（scanner），简单来说就是调用 next() 方法，一个一个字母的来读取字符，然后与定义好的 JavaScript 关键字符做比较，生成对应的Token。Token 是一个不可分割的最小单元，例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。</description>
    </item>
    
    <item>
      <title>Webpack 工作原理（二）——打包构建流程分析</title>
      <link>https://goyth.cn/2018/12/10/webpackflow/</link>
      <pubDate>Mon, 10 Dec 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/12/10/webpackflow/</guid>
      <description>webpack 主要工作流程 Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程： &lt;strong&gt;初始化参数&lt;/strong&gt;：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数； - &lt;strong&gt;开始编译&lt;/strong&gt;：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的run方法开始执行编译； 确定入口：根据配置中的 entry 找出所有的入口文件 - &lt;strong&gt;编译模块&lt;/strong&gt;：从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</description>
    </item>
    
    <item>
      <title>JavaScript垃圾回收机制与内存泄漏</title>
      <link>https://goyth.cn/2018/12/02/v8gc/</link>
      <pubDate>Sun, 02 Dec 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/12/02/v8gc/</guid>
      <description>程序的运行需要分配内存，内存资源是有限的，当程序运行结束后，就应该回收其内存资源。JavaScript使用自动内存管理，也称为垃圾回收机制（garbage collector）。自动垃圾回收的优点是可以简化开发，不用时刻惦记着回收不再使用的变量，降低内存泄漏的可能性；缺点是无法完全的掌握内存的分配以及回收的具体过程。</description>
    </item>
    
    <item>
      <title>Webpack 工作原理（一）——配置篇</title>
      <link>https://goyth.cn/2018/11/17/webpackconfig/</link>
      <pubDate>Sat, 17 Nov 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/11/17/webpackconfig/</guid>
      <description>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。构建就是把源代码转换成发布到线上的可执行 JavaScrip、CSS、HTML 代码，包括如下内容。</description>
    </item>
    
    <item>
      <title>MongoDB 知识点梳理(二)</title>
      <link>https://goyth.cn/2018/10/13/mongodb2/</link>
      <pubDate>Sat, 13 Oct 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/10/13/mongodb2/</guid>
      <description>MongoDB通过配置项启动数据库 启动服务器 mongod --config mongo.conf 启动客户端 mongo --port 50000    参数 含义     &amp;ndash;dbpath 指定数据库文件的目录   &amp;ndash;port 端口 默认是27017 28017   &amp;ndash;fork 以后台守护的方式进行启动   &amp;ndash;logpath 指定日志文件输出路径   &amp;ndash;config 指定一个配置文件   &amp;ndash;auth 以安全方式启动数据库，默认不验证    mongo.</description>
    </item>
    
    <item>
      <title>MongoDB 知识点梳理（一）</title>
      <link>https://goyth.cn/2018/10/12/mongodb/</link>
      <pubDate>Fri, 12 Oct 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/10/12/mongodb/</guid>
      <description>MongoDB是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。 MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</description>
    </item>
    
    <item>
      <title>Promise实现原理</title>
      <link>https://goyth.cn/2018/08/03/promise/</link>
      <pubDate>Fri, 03 Aug 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/08/03/promise/</guid>
      <description>1.&lt;code&gt;promise&lt;/code&gt; 函数的参数（executor）是一个函数，这个函数有两个参数&lt;code&gt;resolve&lt;/code&gt;和&lt;code&gt;reject&lt;/code&gt;，这两个参数也都是函数，分别在&lt;code&gt;promise&lt;/code&gt;成功和失败时调用。 2. 当构建一个&lt;code&gt;promise&lt;/code&gt;实例时，会自动调用这个函数（executor） 3. 每个&lt;code&gt;promise&lt;/code&gt;对象都有一个&lt;code&gt;onFulfilledCallback&lt;/code&gt;队列和一个&lt;code&gt;onRejectedCallback&lt;/code&gt;队列，用来分别存储成功和失败时调用的回调函数</description>
    </item>
    
    <item>
      <title>HTTP知识点整理</title>
      <link>https://goyth.cn/2018/07/11/http2/</link>
      <pubDate>Wed, 11 Jul 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/07/11/http2/</guid>
      <description>&lt;p&gt;HTTP/2是HTTP协议自1999年HTTP 1.1发布后的首个更新，主要基于SPDY协议。于2015年正式发布，HTTP/2解决了HTTP1.1线头阻塞、重复建立TCP连接等问题，充分利用TCP连接的高效传输，使得网络延迟大幅下降，网络传输速度大幅提升。&lt;/p&gt;
&lt;h2 id=&#34;http09---1991&#34;&gt;HTTP/0.9 - 1991&lt;/h2&gt;
&lt;p&gt;第一版的HTTP文档是1991年提出来的 HTTP/0.9。这是有史以来最简单的协议；它仅有一个GET方法。如果客户端要访问服务器上的一些网页，它会作出如下的简单请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;GET &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>WebSocket知识点梳理</title>
      <link>https://goyth.cn/2018/07/09/websocket/</link>
      <pubDate>Mon, 09 Jul 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/07/09/websocket/</guid>
      <description>&lt;h2 id=&#34;什么是websocket&#34;&gt;什么是WebSocket&lt;/h2&gt;
&lt;p&gt;WebSocket是一种在单个TCP连接上进行全双工通讯的协议。它与HTTP协一样，同属于应用层协议。&lt;/p&gt;
&lt;h2 id=&#34;websocket解决了什么问题&#34;&gt;WebSocket解决了什么问题&lt;/h2&gt;
&lt;p&gt;WebSocket使得客户端和服务器之间的数据交换变得更加简单，&lt;strong&gt;允许服务端主动向客户端推送数据&lt;/strong&gt;。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建&lt;strong&gt;持久性的连接&lt;/strong&gt;，并进行&lt;strong&gt;双向数据传输&lt;/strong&gt;。
简单说就是解决了浏览器和服务器之间双向数据传输的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DNS知识点梳理</title>
      <link>https://goyth.cn/2018/07/07/dns/</link>
      <pubDate>Sat, 07 Jul 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/07/07/dns/</guid>
      <description>DNS 服务器 DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。
全世界所有的人每天上网都会使用DNS服务器，如果大家都去同一个地方访问某一台服务器，时延将会非常大，所以DNS服务器的架构必须是分布式、高并发、高可用，如下图：
 根 DNS 服务器 ：返回顶级域 DNS 服务器的 IP 地址 顶级域 DNS 服务器：返回权威 DNS 服务器的 IP 地址 权威 DNS 服务器 ：返回相应主机的 IP 地址  DNS域名解析过程 当用户在浏览器中输入www.</description>
    </item>
    
    <item>
      <title>TCP/IP 协议知识点梳理</title>
      <link>https://goyth.cn/2018/07/04/tcpip/</link>
      <pubDate>Wed, 04 Jul 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/07/04/tcpip/</guid>
      <description>&lt;h2 id=&#34;tcpip协议&#34;&gt;TCP/IP协议&lt;/h2&gt;
&lt;p&gt;TCP/IP协议模型（Transmission Control Protocol/Internet Protocol），包含了一系列构成互联网基础的网络协议，是Internet的核心协议。&lt;/p&gt;
&lt;h3 id=&#34;tcpip-协议分层模型&#34;&gt;TCP/IP 协议分层模型&lt;/h3&gt;
&lt;p&gt;基于TCP/IP的参考模型将协议分成四个层次，它们分别是链路层、网络层、传输层和应用层。下图表示TCP/IP模型与OSI模型各层的对照关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-1256541035.cos.ap-shanghai.myqcloud.com/imgs/TcpIp-tcpip.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浏览器的缓存机制梳理</title>
      <link>https://goyth.cn/2018/07/01/browsecache/</link>
      <pubDate>Sun, 01 Jul 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/07/01/browsecache/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，HTTP报文分为两种：&lt;/p&gt;
&lt;p&gt;HTTP请求(Request)报文，报文格式为：请求行 – HTTP头(通用信息头，请求头，实体头) – 请求报文主体(只有POST才有报文主体)，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-1256541035.cos.ap-shanghai.myqcloud.com/imgs/browseCache-01.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浏览器常见跨域方式梳理</title>
      <link>https://goyth.cn/2018/06/29/crossdomain/</link>
      <pubDate>Fri, 29 Jun 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/06/29/crossdomain/</guid>
      <description>&lt;p&gt;跨域是由于&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html&#34;&gt;浏览器同源策略&lt;/a&gt;导致的，所以跨域只存在于浏览器端，非浏览器端不存在跨域问题，浏览器对跨域的请求、应答都能正常发送接收，只是浏览器在接收跨域应答时，将应答拦截了，所以我们需要一些额外的处理或设置让浏览器将跨域的应答返回给我们。&lt;/p&gt;
&lt;h4 id=&#34;常见的跨域处理方式有&#34;&gt;常见的跨域处理方式有：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;jsonp&lt;/li&gt;
&lt;li&gt;CORS&lt;/li&gt;
&lt;li&gt;iframe + postMessage&lt;/li&gt;
&lt;li&gt;iframe + window.name&lt;/li&gt;
&lt;li&gt;iframe + location.hash&lt;/li&gt;
&lt;li&gt;iframe + domain&lt;/li&gt;
&lt;li&gt;nginx代理&lt;/li&gt;
&lt;li&gt;Nodejs中间件&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JavaScript之apply、call和bind的模拟实现</title>
      <link>https://goyth.cn/2018/05/27/applyandcall/</link>
      <pubDate>Sun, 27 May 2018 22:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/05/27/applyandcall/</guid>
      <description>apply() apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。当第一个参数为 null 时，函数上下文为 window。
var obj = { name : &amp;#39;luke&amp;#39; } function func(age, gender){ console.log(this.name + &amp;#39; &amp;#39; + age + &amp;#39; &amp;#39; + gender); } func.apply(obj, [18, &amp;#39;male&amp;#39;]); // luke 18 male apply模拟实现 Function.</description>
    </item>
    
    <item>
      <title>N-Sum 问题</title>
      <link>https://goyth.cn/2018/05/25/nsum/</link>
      <pubDate>Fri, 25 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/05/25/nsum/</guid>
      <description>问题描述 给定一个包含多个整数且排好序的数组 nums 和一个目标值 target，判断 nums 中是否存在 N(N&amp;gt;1) 个元素，使得 N 个元素之和与 target 相等？找出所有满足条件且不重复的N元组。
解题思路 通过递归降幂将 N-Sum问题 降幂到 2-Sum 问题，然后采用两边加逼的办法求解
JavaScript 版本 /** * @param {number[]} nums * @param {number} target * @param {number} n * @param {number[]} result * @param {number[]} results 结果集 */ function findNsum(nums, target, n, result, results) { if(n&amp;lt;2 || nums.</description>
    </item>
    
    <item>
      <title>浏览器渲染之回流（Reflow）与重绘（Repaint）</title>
      <link>https://goyth.cn/2018/05/25/reflowandrepaint/</link>
      <pubDate>Fri, 25 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/05/25/reflowandrepaint/</guid>
      <description>回流（Reflow）和重绘（Repaint）的定义 回流（Reflow） 对于DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式（浏览器的、开发人员定义的等）来计算，并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow。 重绘（Repaint） 当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为 repaint。</description>
    </item>
    
    <item>
      <title>浏览器页面渲染流程梳理</title>
      <link>https://goyth.cn/2018/05/23/browserrendering/</link>
      <pubDate>Wed, 23 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/05/23/browserrendering/</guid>
      <description>&lt;h2 id=&#34;浏览器渲染基本流程&#34;&gt;浏览器渲染基本流程&lt;/h2&gt;
&lt;p&gt;浏览器渲染流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-1256541035.cos.ap-shanghai.myqcloud.com/imgs/browserRendering-webkitflow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;大概可以划分成以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过HTML解析器解析HTML文本并构建DOM tree&lt;/li&gt;
&lt;li&gt;通过CSS解析器解析CSS样式表并构建CSSOM tree&lt;/li&gt;
&lt;li&gt;根据DOM tree 和 CSSOM tree 构建 Render tree&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 之函数防抖与节流</title>
      <link>https://goyth.cn/2018/05/10/debounceandthrottle/</link>
      <pubDate>Thu, 10 May 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/05/10/debounceandthrottle/</guid>
      <description>函数防抖（debounce) 函数防抖是指在函数调用动作触发n秒后才开始执行，n秒内若再次触发，则重新开始计时，再次等待n秒后才开始执行。如果n秒内不断触发，那就不断重新开始计时，一直等到有一个n秒内没有触发，才开始执行此函数。
根据描述，我们可以用setTimeout来实现一个简单版的防抖函数
第一版 ／** * @ fn 回调函数 * @ delay 延迟时间 *／ function debounce(fn, delay){ let timer = null; return function(){ clearTimeout(timer); timer = setTimeout(fn, delay); } } 由于setTimeout的回调函数内的this是指向window，如果不传参数则argument对象为空，所以我们得修复this的指向，并将argument对象也传给回调函数</description>
    </item>
    
    <item>
      <title>JavaScript 原型链与继承</title>
      <link>https://goyth.cn/2018/04/23/prototypeandextend/</link>
      <pubDate>Mon, 23 Apr 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/04/23/prototypeandextend/</guid>
      <description>&lt;h3 id=&#34;原型对象&#34;&gt;原型对象&lt;/h3&gt;
&lt;p&gt;无论什么时候，只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 &lt;code&gt;prototype&lt;/code&gt; 属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个 &lt;code&gt;constructor&lt;/code&gt;（构造函数）属性，这个属性指向 &lt;code&gt;prototype&lt;/code&gt; 属性所在的函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Person(){
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 正则表达式</title>
      <link>https://goyth.cn/2018/04/01/jsregexp/</link>
      <pubDate>Sun, 01 Apr 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/04/01/jsregexp/</guid>
      <description>正则表达式 一种几乎可以在所有的程序设计语言里和所有的计算机平台上使用的文字处理工具。它可以用来查找特定的信息（搜索），也可以用来查找并编辑特定的信息（替换）。 核心是 匹配，匹配位置或者匹配字符
先简单的介绍一下语法 基本元字符   .： 匹配除了换行符之外的任何单个字符
  \ ： 在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。例如，没有前\的&#39;b&#39;通常匹配小写&#39;b&#39;，无论它们出现在哪里。如果加了&#39;\&#39;,这个字符变成了一个特殊意义的字符，反斜杠也可以将其后的特殊字符，转义为字面量。例如，模式 /a*/ 代表会匹配 0 a。相反，模式 /a\*/ 将 &#39; * &#39; 的特殊性移除，从而可以匹配像 &amp;quot;a*&amp;quot; 这样的字符串。
  | ： 逻辑或操作符</description>
    </item>
    
    <item>
      <title>排序算法之堆排序</title>
      <link>https://goyth.cn/2018/02/09/heapsort/</link>
      <pubDate>Fri, 09 Feb 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/09/heapsort/</guid>
      <description>排序算法总览：
堆排序 二叉树 要了解堆首先得了解一下二叉树，在计算机科学中，二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。
二叉树的每个结点至多只有二棵子树（不存在度大于 2 的结点），二叉树的子树有左右之分，次序不能颠倒。二叉树的第 i 层至多有 2i - 1 个结点；深度为 k 的二叉树至多有 2k - 1 个结点；对任何一棵二叉树 T，如果其终端结点数为 n0，度为 2 的结点数为 n2，则n0 = n2 + 1。</description>
    </item>
    
    <item>
      <title>排序算法之归并排序</title>
      <link>https://goyth.cn/2018/02/09/mergesort/</link>
      <pubDate>Fri, 09 Feb 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/09/mergesort/</guid>
      <description>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。
归并排序可以使用递归和迭代两种方式进行实现</description>
    </item>
    
    <item>
      <title>排序算法之快速排序</title>
      <link>https://goyth.cn/2018/02/09/quicksort/</link>
      <pubDate>Fri, 09 Feb 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/09/quicksort/</guid>
      <description>快速排序是图灵奖得主 C. R. A. Hoare 于 1960 年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。
分治法的基本思想是：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。
利用分治法可将快速排序的分为三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在数据集之中，选择一个元素作为”基准”（pivot）。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>排序算法之希尔排序</title>
      <link>https://goyth.cn/2018/02/08/shellsort/</link>
      <pubDate>Thu, 08 Feb 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/08/shellsort/</guid>
      <description>希尔排序(Shell&amp;rsquo;s Sort)也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。 希尔排序是基于插入排序的以下两点性质而提出改进方法的： * 插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率； * 但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；
希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。</description>
    </item>
    
    <item>
      <title>排序算法之直接插入排序</title>
      <link>https://goyth.cn/2018/02/08/straightinsertionsort/</link>
      <pubDate>Thu, 08 Feb 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/08/straightinsertionsort/</guid>
      <description>常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。这里主要介绍直接插入排序. 直接插入排序(Straight Insertion Sort)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。</description>
    </item>
    
    <item>
      <title>排序算法之选择排序</title>
      <link>https://goyth.cn/2018/02/08/selectionsort/</link>
      <pubDate>Thu, 08 Feb 2018 21:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/08/selectionsort/</guid>
      <description>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</description>
    </item>
    
    <item>
      <title>排序算法之冒泡排序</title>
      <link>https://goyth.cn/2018/02/08/bubblesort/</link>
      <pubDate>Thu, 08 Feb 2018 10:53:54 +0800</pubDate>
      
      <guid>https://goyth.cn/2018/02/08/bubblesort/</guid>
      <description>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。 它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。 这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名“冒泡排序”。</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://goyth.cn/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goyth.cn/contact/</guid>
      <description> Your Name Email Address An email address is required.  Message   </description>
    </item>
    
  </channel>
</rss>